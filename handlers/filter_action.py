from database import async_session, Filter
from sqlalchemy import select
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from utils import safe_callback_data
from telegram.ext import ConversationHandler, ContextTypes
from datetime import datetime, timezone
import logging

from constants import MAIN_LABELS, ZAGOROD_LABELS, filter_status_color

logger = logging.getLogger(__name__)

SHOW_FILTER_ACTIONS, CONFIRM_REPLACE, ENTER_NOTE = range(3)
CANCEL_BUTTON = "‚ùå –û—Ç–º–µ–Ω–∞"

def safe_handler(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            return await func(update, context)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ filter_action.py: %s", e)
            msg = getattr(update, "effective_message", None)
            if msg:
                await msg.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ /start.")
            return ConversationHandler.END
    return wrapper


async def filter_action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–∞: —É–¥–∞–ª–µ–Ω–∏–µ, –æ—Ç–º–µ—Ç–∫–∞ –∑–∞–º–µ–Ω—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –∞–≤—Ç–æ–∑–∞–∫–∞–∑.
    """
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    try:
        if data.startswith("filter_delete_"):
            filter_id = int(data.replace("filter_delete_", ""))
            async with async_session() as session:
                filt = await session.get(Filter, filter_id)
                if filt and filt.user_id == user_id:
                    await session.delete(filt)
                    await session.commit()
                    await query.answer("–§–∏–ª—å—Ç—Ä —É–¥–∞–ª—ë–Ω!")
                    await query.message.delete()
                    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
                    user_filters = await session.scalars(
                        select(Filter).where(Filter.user_id == user_id)
                    )
                    if not user_filters.first():
                        from utils import send_clean_message
                        await send_clean_message(update, context, "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤. üìù –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!")
                else:
                    await query.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!", show_alert=True)
            return

        if data.startswith("filter_replaced_"):
            filter_id = int(data.replace("filter_replaced_", ""))
            async with async_session() as session:
                filt = await session.get(Filter, filter_id)
                if filt and filt.user_id == user_id:
                    if not filt.history:
                        filt.history = []
                    filt.history.append({
                        "date": datetime.now(timezone.utc).strftime("%Y-%m-%d"),
                        "comment": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –∑–∞–º–µ–Ω—É"
                    })
                    filt.replace_count = (filt.replace_count or 0) + 1
                    filt.install_date = datetime.now(timezone.utc).date()
                    await session.commit()
                    await query.answer("–û—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–º–µ–Ω—É!")

                    days_left = filt.interval
                    status = filter_status_color(days_left)
                    title = filt.name or MAIN_LABELS.get(filt.type, ZAGOROD_LABELS.get(filt.type, filt.type.title()))
                    text = (
                        f"{status} <b>{title}</b>\n"
                        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {filt.install_date:%d.%m.%Y}\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å: <b>{days_left} –¥.</b>\n"
                        f"–ó–∞–º–µ–Ω: {filt.replace_count}\n"
                    )
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "‚úÖ –£–∂–µ –∑–∞–º–µ–Ω–∏–ª",
                                callback_data=safe_callback_data(f"filter_replaced_{filt.id}")
                            ),
                            InlineKeyboardButton(
                                "‚ùå –£–¥–∞–ª–∏—Ç—å",
                                callback_data=safe_callback_data(f"filter_delete_{filt.id}")
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                "üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                                callback_data=safe_callback_data(f"add_photo_{filt.id}")
                            ),
                            InlineKeyboardButton(
                                "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                                callback_data=safe_callback_data(f"rename_filter_{filt.id}")
                            )
                        ]
                    ]
                    markup = InlineKeyboardMarkup(keyboard)
                    await query.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
                else:
                    await query.answer("–û—à–∏–±–∫–∞!", show_alert=True)
            return
        
        if data.startswith("add_photo_"):
            filter_id = int(data.replace("add_photo_", ""))
            context.user_data["last_filter_id"] = filter_id
            await query.answer()
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
            return

        if data.startswith("autoorder_"):
            try:
                await autoorder_handler(update, context)
            except NameError:
                await query.answer("–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", show_alert=True)
            return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        await query.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)
    return None
