import re
import logging
from telegram import Update, ForceReply, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes, MessageHandler, filters,
    CallbackQueryHandler, ConversationHandler, CommandHandler
)
from database import async_session, User
from constants import get_main_inline_keyboard, PROFILE_EDIT, PROFILE_PHONE, PROFILE_EMAIL
from utils import send_clean_message


# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_PHONE, CONFIRM_PHONE = range(2)
CANCEL_BUTTON = "‚ùå –û—Ç–º–µ–Ω–∞"

END = ConversationHandler.END

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä"""
    user_id = update.callback_query.from_user.id
    try:
        async with async_session() as session:
            user = await session.get(User, user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.")
        return END
    if not user:
        await update.callback_query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. /start")
        return END

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user.first_name or '-'}\n"
        f"Username: @{user.username or '-'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '-'}"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å e-mail", callback_data="edit_email")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await update.callback_query.edit_message_text(text, parse_mode="HTML", reply_markup=kb)
    return PROFILE_EDIT

async def edit_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.edit_message_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79991234567):",
    )
    return PROFILE_PHONE

async def edit_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.edit_message_text(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ e-mail:",
    )
    return PROFILE_EMAIL

async def save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if not re.match(r"^(\+7|8)\d{10}$", text):
        await update.message.reply_text(
            "üòÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.",
            reply_markup=ForceReply(selective=True)
        )
        return PROFILE_PHONE

    user_id = update.effective_user.id
    try:
        async with async_session() as session:
            user = await session.get(User, user_id)
            if user:
                user.phone = text
                await session.commit()
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return END
    except Exception as e:
        await update.message.reply_text(
            "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.",
            reply_markup=ForceReply(selective=True)
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        return PROFILE_PHONE

    await update.message.reply_text(
        f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {text}",
        reply_markup=get_main_inline_keyboard()
    )
    context.user_data.clear()
    return END

async def save_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w{2,}$", text):
        await update.message.reply_text(
            "üòÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.",
            reply_markup=ForceReply(selective=True)
        )
        return PROFILE_EMAIL

    user_id = update.effective_user.id
    try:
        async with async_session() as session:
            user = await session.get(User, user_id)
            if user:
                # ! –í–ù–ò–ú–ê–ù–ò–ï: –¥–æ–±–∞–≤—å –ø–æ–ª–µ email –≤ –º–æ–¥–µ–ª—å User!
                user.email = text
                await session.commit()
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return END
    except Exception as e:
        await update.message.reply_text(
            "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.",
            reply_markup=ForceReply(selective=True)
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email: {e}")
        return PROFILE_EMAIL

    await update.message.reply_text(
        f"‚úÖ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {text}",
        reply_markup=get_main_inline_keyboard()
    )
    context.user_data.clear()
    return END

async def cancel_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_inline_keyboard())
    context.user_data.clear()
    return END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.",
        reply_markup=ReplyKeyboardMarkup([["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    return ConversationHandler.END

phone_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(edit_phone, pattern="^edit_phone$"),
        CallbackQueryHandler(edit_email, pattern="^edit_email$")
    ],
    states={
        PROFILE_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_phone)],
        PROFILE_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_email)],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_phone),
        CallbackQueryHandler(cancel_phone, pattern="^back_to_menu$"),
    ],
    per_message=False
)
