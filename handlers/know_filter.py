import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CallbackQueryHandler, CommandHandler, filters
from constants import get_main_inline_keyboard, ADMIN_CHAT_ID
import traceback
from utils import send_clean_message


KNOW_FILTER_PHOTO = 7400

async def start_know_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ '–£–∑–Ω–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ—Ç–æ'"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º. –ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –º–æ–¥–µ–ª—å –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ –µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_know_filter")]
        ])
    )
    return KNOW_FILTER_PHOTO

async def receive_know_filter_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if not update.message.photo:
            await update.message.reply_text(
                "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å.",
                reply_markup=get_main_inline_keyboard()
            )
            return KNOW_FILTER_PHOTO
        photo = update.message.photo[-1]
        file = await photo.get_file()
        user = update.effective_user
        caption = (
            f"üë§ –ó–∞–ø—Ä–æ—Å '–£–∑–Ω–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä':\n"
            f"User: {user.first_name or ''} @{user.username or ''} (id: {user.id})"
        )
        await context.bot.send_photo(
            chat_id=int(ADMIN_CHAT_ID),
            photo=file.file_id,
            caption=caption
        )
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —á–∞—Ç–µ.",
            reply_markup=get_main_inline_keyboard()
        )
    except Exception as e:
        import traceback
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}\n{traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_main_inline_keyboard()
        )
    return ConversationHandler.END


async def cancel_know_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "–û—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â—ë –ø–æ–º–æ—á—å?",
        reply_markup=get_main_inline_keyboard()
    )
    return ConversationHandler.END

know_filter_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_know_filter, pattern="^know_filter$")],
    states={
        KNOW_FILTER_PHOTO: [MessageHandler(filters.PHOTO, receive_know_filter_photo)],
    },
    fallbacks=[
        CallbackQueryHandler(cancel_know_filter, pattern="^cancel_know_filter$")
    ]
)
