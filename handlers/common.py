import random
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from constants import (
    WELCOME_EMOJIS, get_main_inline_keyboard, CANCEL_TEXT, BACK_TEXT
)
from database import async_session, User
from utils import send_clean_message as _send_clean_message

def _main_menu_text(user) -> str:
    return (
        f"{random.choice(WELCOME_EMOJIS)} –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
        "–Ø ‚Äî –§–∏–ª—å—Ç—Ä–æ–Ω, —Ç–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —á–∏—Å—Ç–æ–π –≤–æ–¥–µ.\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–º–µ–Ω–µ.\n"
        "‚Ä¢ –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã ‚Äî —Å–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç—É—Å, –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–æ—Ç–æ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä —É –º–µ–Ω—è  - —É–∂–µ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä, –ø–æ–¥—Å–∫–∞–∂–µ–º –∫–∞–∫ –µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å.\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –æ—Ñ–æ—Ä–º–∏ –∞–≤—Ç–æ–æ–ø–ª–∞—Ç—É –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–±–æ—Ç.\n"
        "‚Ä¢ –ù–µ –∑–Ω–∞—é —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å  ‚Äî –∑–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å: –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä, –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ –∫—É–ø–∏—Ç—å, –∏–ª–∏ —Å–≤—è–∂—É —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n"
        "üíß –í—Å–µ–≥–¥–∞ —á–∏—Å—Ç–∞—è –≤–æ–¥–∞ –±–µ–∑ —Ö–ª–æ–ø–æ—Ç!\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if update.message:
        try:
            await update.message.delete()
        except Exception as ex:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start: {ex}")

    is_new = False
    try:
        async with async_session() as session:
            if not await session.get(User, user.id):
                session.add(User(id=user.id,
                                 username=user.username,
                                 first_name=user.first_name))
                await session.commit()
                is_new = True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    if is_new:
        await _send_clean_message(
            update,
            context,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="show_menu")]
            ])
        )
        return ConversationHandler.END

    text = _main_menu_text(user)
    await _send_clean_message(update, context, text, reply_markup=get_main_inline_keyboard())
    return ConversationHandler.END

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear"""
    chat_id = update.effective_chat.id
    bot_msgs = context.user_data.get('bot_msgs', [])
    for msg_id in bot_msgs:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as ex:
            logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {ex}")
    context.user_data['bot_msgs'] = []
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–µ–Ω—Ç—ã.")

async def send_clean_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, **kwargs):
    chat_id = update.effective_chat.id
    bot_msgs = context.user_data.get('bot_msgs', [])
    for msg_id in bot_msgs:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as ex:
            logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {ex}")

    sent_msg = None
    if getattr(update, "callback_query", None) and update.callback_query:
        sent_msg = await update.callback_query.message.reply_text(text, **kwargs)
    elif getattr(update, "message", None) and update.message:
        sent_msg = await update.message.reply_text(text, **kwargs)

    if sent_msg:
        context.user_data['bot_msgs'] = [sent_msg.message_id]
    return sent_msg



async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data

    if data == "show":
        from handlers.filter import show_filters
        return await show_filters(update, context)

    if data == "profile":
        from handlers.profile import profile
        return await profile(update, context)

    if data == "referral":
        uid = update.callback_query.from_user.id
        await update.callback_query.edit_message_text(
            f"üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!\n"
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/YOUR_BOT?start=ref%3D{uid}"
        )
        return ConversationHandler.END

    # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä" ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    if data == "register":
        from handlers.my_calendar import start_add_filter
        return await start_add_filter(update, context)
    

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –¥–∞—Ç–æ–π
    from constants import MAIN_LABELS
    if data in MAIN_LABELS.keys():
        from handlers.filter import filter_choose_callback
        return await filter_choose_callback(update, context)

    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ (‚ÑπÔ∏è) –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    if data.startswith("hint_") or data.startswith("filter_more_"):
        from handlers.filter import filter_hint_handler
        return await filter_hint_handler(update, context)

    if data.startswith("filter_scheme_"):
        from handlers.filter import filter_scheme_handler
        return await filter_scheme_handler(update, context)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data
    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
    await update.callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
    return ConversationHandler.END




async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    msg = getattr(update, 'message', None) or getattr(update, 'callback_query', None)
    if msg:
        await msg.reply_text(
            CANCEL_TEXT,
            reply_markup=get_main_inline_keyboard()
        )
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error("Exception while handling update:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."
        )

async def go_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text=BACK_TEXT,
        reply_markup=get_main_inline_keyboard()
    )
    return ConversationHandler.END

async def cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text=CANCEL_TEXT,
        reply_markup=get_main_inline_keyboard()
    )
    return ConversationHandler.END

async def cancel_calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_inline_keyboard()
    )
    return ConversationHandler.END

async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_inline_keyboard()
    )
    return ConversationHandler.END


async def show_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    query = update.callback_query
    await query.answer()
    text = _main_menu_text(query.from_user)
    await _send_clean_message(update, context, text, reply_markup=get_main_inline_keyboard())
    return ConversationHandler.END

async def support_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "ü§ñ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å:\n"
        "‚Ä¢ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
        "‚Ä¢ –ì–¥–µ –∫—É–ø–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
        "‚Ä¢ –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å\n"
        "‚Ä¢ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º.\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @vkup25"
    )
    return ConversationHandler.END
