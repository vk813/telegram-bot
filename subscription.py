import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
import time
from telegram.ext import ContextTypes, ConversationHandler
import logging
from constants import CANCEL_BUTTON

logger = logging.getLogger(__name__)

YOUR_MANAGER_ID = int(os.getenv("MANAGER_ID", "660442813"))

import time

DEBOUNCE_SECONDS = 2

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
cancel_markup = ReplyKeyboardMarkup([[CANCEL_BUTTON]], resize_keyboard=True)
main_menu_markup = ReplyKeyboardMarkup([["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)


def safe_handler(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            return await func(update, context)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ handler: %s", e)
            msg = getattr(update, "effective_message", None)
            if msg:
                await msg.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
            return ConversationHandler.END
    return wrapper


async def subscription_interest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = time.time()
    last_click = context.user_data.get('last_click', 0)
    if now - last_click < DEBOUNCE_SECONDS:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä
    context.user_data['last_click'] = now


# –°—Ç–∞—Ä—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –∏–∑ –º–µ–Ω—é (callback_data="subscriptions")
async def subscription_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="subscription_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="subscription_no")
        ]
    ]
    await update.callback_query.edit_message_text(
        "üíß –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –æ—á–∏—Å—Ç–∫–∏ –≤–æ–¥—ã (–∑–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Å—ë –ø–æ–¥ –∫–ª—é—á).\n\n"
        "1Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ª–∏ –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å —Å –≤—ã–µ–∑–¥–æ–º –º–∞—Å—Ç–µ—Ä–∞?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û—Ç–≤–µ—Ç –Ω–∞ "–î–∞/–ù–µ—Ç"
async def subscription_interest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "subscription_no":
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ï—Å–ª–∏ —á—Ç–æ ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
        return
    # –µ—Å–ª–∏ "–î–∞"
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="subscription_photo")],
        [InlineKeyboardButton("–ù–µ –∑–Ω–∞—é –º–æ–¥–µ–ª—å", callback_data="subscription_dontknow")]
    ]
    await query.edit_message_text(
        "2Ô∏è‚É£ –ö–∞–∫–∞—è —É –≤–∞—Å —Å–µ–π—á–∞—Å —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞?\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –§–æ—Ç–æ/–ù–µ –∑–Ω–∞—é
async def subscription_filter_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if query.data == "subscription_dontknow":
        context.user_data['filter_info'] = "–ù–µ –∑–Ω–∞—é"
    else:
        context.user_data['filter_info'] = "–û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ"  # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π MessageHandler

    # –ü—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-–∫–æ–Ω—Ç–∞–∫—Ç", callback_data="subscription_contact")]
    ]
    await query.edit_message_text(
        "3Ô∏è‚É£ –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram, —á—Ç–æ–±—ã –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã:
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup([["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    return ConversationHandler.END




# –ö–æ–Ω—Ç–∞–∫—Ç
async def subscription_contact_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    text = (
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username}, id={user.id})\n"
        f"–°–∏—Å—Ç–µ–º–∞/–º–æ–¥–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞: {context.user_data.get('filter_info', '-')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: —á–µ—Ä–µ–∑ Telegram"
    )
    await context.bot.send_message(chat_id=YOUR_MANAGER_ID, text=text)
    await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º MessageHandler)
async def subscription_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_id = update.message.photo[-1].file_id
    user = update.effective_user
    text = (
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username}, id={user.id})\n"
        f"–§–æ—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞: {file_id}"
    )
    await context.bot.send_message(chat_id=YOUR_MANAGER_ID, text=text)
    await context.bot.send_photo(chat_id=YOUR_MANAGER_ID, photo=file_id)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.")

